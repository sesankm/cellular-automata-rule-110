(undo-tree-save-format-version . 1)
"812996076914a80f10d05eedac3dcafaf9748104"
[nil nil nil nil (26502 62921 881608 660000) 0 nil]
([nil nil ((nil rear-nonsticky nil 2957 . 2958) (nil fontified nil 104 . 2958) (nil fontified nil 102 . 104) (nil fontified nil 82 . 102) (nil fontified nil 81 . 82) (nil fontified nil 64 . 81) (nil fontified nil 63 . 64) (nil fontified nil 45 . 63) (nil fontified nil 43 . 45) (nil fontified nil 24 . 43) (nil fontified nil 23 . 24) (nil fontified nil 2 . 23) (nil fontified nil 1 . 2) (1 . 2958) (t . -1)) nil (26502 62921 881607 812000) 0 nil])
([nil nil ((#("#define WIN_W 1500
#define WIN_H 900
#define GRID_SIZE 10

typedef struct {
	int r,g,b;
} Color;


void initGrid(int** grid) {
	for(int i = 0; i < WIN_H / GRID_SIZE; i++) {
		grid[i] = malloc(sizeof(int) * WIN_W / GRID_SIZE);
		memset(grid[i], 0, sizeof(int) * WIN_W / GRID_SIZE);
	}
}

void drawGrid(SDL_Renderer* rend, Color gridColor) {
	SDL_SetRenderDrawColor(rend, gridColor.r, gridColor.g, gridColor.b, 255);
	for(int i = 0; i < WIN_W; i+=GRID_SIZE) {
		SDL_RenderDrawLine(rend, i, 0, i, WIN_H);
	}

	for(int i = 0; i < WIN_H; i+=GRID_SIZE) {
		SDL_RenderDrawLine(rend, 0, i, WIN_W, i);
	}
}

void updateCells(int** grid){
	for(int i = 0; i < WIN_H / GRID_SIZE - 1; i++) {
		for(int j = 0; j < WIN_W / GRID_SIZE; j++) {
			if(grid[i][j] == 1) {
				if(grid[i + 1][j] == 0) {
					grid[i][j] = 0;
					grid[i + 1][j] = 1;
				}
			}
		}
	}
}

void drawCells(SDL_Renderer* rend, int** grid){
	SDL_Rect rect;
	for(int i = 0; i < WIN_H / GRID_SIZE; i++) {
		for(int j = 0; j < WIN_W / GRID_SIZE; j++) {
			if(grid[i][j] == 1) {
				rect = (SDL_Rect) {j * GRID_SIZE, i * GRID_SIZE, GRID_SIZE, GRID_SIZE};
				SDL_RenderFillRect(rend, &rect);
			}
		}
	}
}

" 0 1 (c-in-sws t face font-lock-preprocessor-face fontified t c-is-sws t) 1 7 (c-in-sws t face font-lock-preprocessor-face fontified t) 7 8 (c-in-sws t fontified t) 8 13 (c-in-sws t face font-lock-variable-name-face fontified t) 13 19 (c-in-sws t fontified t) 19 20 (c-in-sws t face font-lock-preprocessor-face fontified t c-is-sws t) 20 26 (c-in-sws t face font-lock-preprocessor-face fontified t) 26 27 (c-in-sws t fontified t) 27 32 (c-in-sws t face font-lock-variable-name-face fontified t) 32 37 (c-in-sws t fontified t) 37 38 (c-in-sws t face font-lock-preprocessor-face fontified t c-is-sws t) 38 44 (c-in-sws t face font-lock-preprocessor-face fontified t) 44 45 (c-in-sws t fontified t) 45 54 (c-in-sws t face font-lock-variable-name-face fontified t) 54 58 (c-in-sws t fontified t) 58 59 (fontified t c-is-sws t) 59 60 (c-typedef ("Color") face font-lock-keyword-face fontified t c-is-sws t) 60 66 (face font-lock-keyword-face fontified t) 66 67 (fontified t) 67 73 (face font-lock-keyword-face fontified t) 73 77 (fontified t) 77 79 (face font-lock-type-face fontified t) 79 80 (face font-lock-type-face c-type c-decl-id-start fontified t) 80 81 (fontified t) 81 82 (face font-lock-variable-name-face fontified t) 82 83 (c-type c-decl-id-start fontified t) 83 84 (face font-lock-variable-name-face fontified t) 84 85 (c-type c-decl-id-start fontified t) 85 86 (face font-lock-variable-name-face fontified t) 86 88 (fontified t) 88 89 (c-type c-decl-type-start fontified t) 89 90 (fontified t) 90 95 (face font-lock-type-face fontified t) 95 99 (fontified t) 99 102 (face font-lock-type-face fontified t) 102 103 (face font-lock-type-face c-type c-decl-id-start fontified t) 103 104 (fontified t) 104 112 (face font-lock-function-name-face fontified t) 112 113 (c-type c-decl-arg-start fontified t) 113 116 (face font-lock-type-face fontified t) 116 119 (fontified t) 119 123 (face font-lock-variable-name-face fontified t) 123 128 (fontified t) 128 131 (face font-lock-keyword-face fontified t) 131 132 (fontified t) 132 134 (face font-lock-type-face fontified t) 134 135 (face font-lock-type-face c-type c-decl-id-start fontified t) 135 136 (fontified t) 136 137 (face font-lock-variable-name-face fontified t) 137 192 (fontified t) 192 198 (face font-lock-keyword-face fontified t) 198 199 (fontified t) 199 202 (face font-lock-type-face fontified t) 202 247 (fontified t) 247 253 (face font-lock-keyword-face fontified t) 253 254 (fontified t) 254 257 (face font-lock-type-face fontified t) 257 287 (fontified t) 287 290 (face font-lock-type-face fontified t) 290 291 (face font-lock-type-face c-type c-decl-id-start fontified t) 291 292 (fontified t) 292 300 (face font-lock-function-name-face fontified t) 300 301 (c-type c-decl-arg-start fontified t) 301 313 (face font-lock-type-face fontified t) 313 315 (fontified t) 315 319 (face font-lock-variable-name-face fontified t) 319 320 (c-type c-decl-arg-start fontified t) 320 321 (fontified t) 321 326 (face font-lock-type-face fontified t) 326 327 (fontified t) 327 336 (face font-lock-variable-name-face fontified t) 336 416 (fontified t) 416 419 (face font-lock-keyword-face fontified t) 419 420 (fontified t) 420 422 (face font-lock-type-face fontified t) 422 423 (face font-lock-type-face c-type c-decl-id-start fontified t) 423 424 (fontified t) 424 425 (face font-lock-variable-name-face fontified t) 425 507 (fontified t) 507 510 (face font-lock-keyword-face fontified t) 510 511 (fontified t) 511 513 (face font-lock-type-face fontified t) 513 514 (face font-lock-type-face c-type c-decl-id-start fontified t) 514 515 (fontified t) 515 516 (face font-lock-variable-name-face fontified t) 516 599 (fontified t) 599 602 (face font-lock-type-face fontified t) 602 603 (face font-lock-type-face c-type c-decl-id-start fontified t) 603 604 (fontified t) 604 615 (face font-lock-function-name-face fontified t) 615 616 (c-type c-decl-arg-start fontified t) 616 619 (face font-lock-type-face fontified t) 619 622 (fontified t) 622 626 (face font-lock-variable-name-face fontified t) 626 630 (fontified t) 630 633 (face font-lock-keyword-face fontified t) 633 634 (fontified t) 634 636 (face font-lock-type-face fontified t) 636 637 (face font-lock-type-face c-type c-decl-id-start fontified t) 637 638 (fontified t) 638 639 (face font-lock-variable-name-face fontified t) 639 681 (fontified t) 681 684 (face font-lock-keyword-face fontified t) 684 685 (fontified t) 685 687 (face font-lock-type-face fontified t) 687 688 (face font-lock-type-face c-type c-decl-id-start fontified t) 688 689 (fontified t) 689 690 (face font-lock-variable-name-face fontified t) 690 729 (fontified t) 729 731 (face font-lock-keyword-face fontified t) 731 755 (fontified t) 755 757 (face font-lock-keyword-face fontified t) 757 848 (fontified t) 848 851 (face font-lock-type-face fontified t) 851 852 (face font-lock-type-face c-type c-decl-id-start fontified t) 852 853 (fontified t) 853 862 (face font-lock-function-name-face fontified t) 862 863 (c-type c-decl-arg-start fontified t) 863 875 (face font-lock-type-face fontified t) 875 877 (fontified t) 877 881 (face font-lock-variable-name-face fontified t) 881 882 (c-type c-decl-arg-start fontified t) 882 883 (fontified t) 883 886 (face font-lock-type-face fontified t) 886 889 (fontified t) 889 893 (face font-lock-variable-name-face fontified t) 893 897 (fontified t) 897 904 (face font-lock-type-face fontified t) 904 905 (face font-lock-type-face c-type c-decl-id-start fontified t) 905 906 (fontified t) 906 910 (face font-lock-variable-name-face fontified t) 910 913 (fontified t) 913 916 (face font-lock-keyword-face fontified t) 916 917 (fontified t) 917 919 (face font-lock-type-face fontified t) 919 920 (face font-lock-type-face c-type c-decl-id-start fontified t) 920 921 (fontified t) 921 922 (face font-lock-variable-name-face fontified t) 922 960 (fontified t) 960 963 (face font-lock-keyword-face fontified t) 963 964 (fontified t) 964 966 (face font-lock-type-face fontified t) 966 967 (face font-lock-type-face c-type c-decl-id-start fontified t) 967 968 (fontified t) 968 969 (face font-lock-variable-name-face fontified t) 969 1008 (fontified t) 1008 1010 (face font-lock-keyword-face fontified t) 1010 1042 (fontified t) 1042 1050 (fontified t) 1050 1052 (fontified t) 1052 1053 (c-type c-not-decl fontified t) 1053 1066 (fontified t) 1066 1067 (c-type c-not-decl fontified t) 1067 1081 (fontified t) 1081 1082 (c-type c-not-decl fontified t) 1082 1092 (fontified t) 1092 1093 (c-type c-not-decl fontified t) 1093 1158 (fontified t)) . 44) (undo-tree-id40 . -1157) (undo-tree-id41 . -1157) (undo-tree-id42 . -1157) (undo-tree-id43 . -18) (undo-tree-id44 . -90) (undo-tree-id45 . -95) (undo-tree-id46 . -1157) (undo-tree-id47 . -1157) (undo-tree-id48 . -1157) (undo-tree-id49 . -1158) (undo-tree-id50 . -1158) 1201) nil (26502 62921 881606 493000) 0 nil])
([nil nil ((#("
	Color gunMetal = {30, 45, 47};
	Color darkGreen = {2, 18, 18};
	Color brownSugar = {197, 123, 87};
	Color tangerine = {241, 171, 134};
	Color yellow = {247, 219, 167};

	SDL_Window* window = SDL_CreateWindow(\"VPaper\", 200, 200, WIN_W, WIN_H, SDL_WINDOW_RESIZABLE);
	SDL_Renderer* rend = SDL_CreateRenderer(window, 0, SDL_RENDERER_SOFTWARE);
	SDL_Event event;
	int running = 1;


	int** grid = malloc(sizeof(int*) * (WIN_H / GRID_SIZE));
	initGrid(grid);


	int mouseX;
	int mouseY;
	int click = 0;
	while(running) {
		if(click) {
			int gridInd = mouseX / GRID_SIZE;
			int gridInd2 = mouseY / GRID_SIZE;
			grid[gridInd2][gridInd] = 1;
		}
		while(SDL_PollEvent(&event)) {
			switch(event.type){
			case SDL_MOUSEBUTTONDOWN:
				mouseX = event.button.x;
				mouseY = event.button.y;
				int gridInd = mouseX / GRID_SIZE;
				int gridInd2 = mouseY / GRID_SIZE;
				grid[gridInd2][gridInd] = 1;
				click = 1;
				break;
			case SDL_MOUSEMOTION:
				if(click) {
					mouseX = event.button.x;
					mouseY = event.button.y;
					int gridInd = mouseX / GRID_SIZE;
					int gridInd2 = mouseY / GRID_SIZE;
					grid[gridInd2][gridInd] = 1;
				}
				break;
			case SDL_MOUSEBUTTONUP:
				click = 0;
				break;
			case SDL_KEYDOWN:
				if(event.key.keysym.sym == SDLK_q) {
					running = 0;
					break;
				}
			}
		}

		SDL_SetRenderDrawColor(rend, darkGreen.r, darkGreen.g, darkGreen.b, 255);
		SDL_RenderClear(rend);
		drawGrid(rend, gunMetal);
		SDL_SetRenderDrawColor(rend, tangerine.r, tangerine.g, tangerine.b, 255);
		drawCells(rend, grid);
		SDL_RenderPresent(rend);
		updateCells(grid);
		usleep(10000);
	}

	SDL_DestroyWindow(window);
	SDL_Quit();
" 0 2 (fontified t) 2 6 (face font-lock-type-face fontified t) 6 7 (face font-lock-type-face c-type c-decl-id-start fontified t) 7 8 (fontified t) 8 16 (face font-lock-variable-name-face fontified t) 16 34 (fontified t) 34 38 (face font-lock-type-face fontified t) 38 39 (face font-lock-type-face c-type c-decl-id-start fontified t) 39 40 (fontified t) 40 49 (face font-lock-variable-name-face fontified t) 49 66 (fontified t) 66 70 (face font-lock-type-face fontified t) 70 71 (face font-lock-type-face c-type c-decl-id-start fontified t) 71 72 (fontified t) 72 82 (face font-lock-variable-name-face fontified t) 82 102 (fontified t) 102 106 (face font-lock-type-face fontified t) 106 107 (face font-lock-type-face c-type c-decl-id-start fontified t) 107 108 (fontified t) 108 117 (face font-lock-variable-name-face fontified t) 117 138 (fontified t) 138 142 (face font-lock-type-face fontified t) 142 143 (face font-lock-type-face c-type c-decl-id-start fontified t) 143 144 (fontified t) 144 150 (face font-lock-variable-name-face fontified t) 150 172 (fontified t) 172 181 (face font-lock-type-face fontified t) 181 182 (face font-lock-type-face c-type c-decl-id-start fontified t) 182 184 (fontified t) 184 190 (face font-lock-variable-name-face fontified t) 190 210 (fontified t) 210 218 (face font-lock-string-face fontified t) 218 266 (fontified t) 266 268 (fontified t) 268 279 (face font-lock-type-face fontified t) 279 280 (face font-lock-type-face c-type c-decl-id-start fontified t) 280 282 (fontified t) 282 286 (face font-lock-variable-name-face fontified t) 286 344 (fontified t) 344 352 (face font-lock-type-face fontified t) 352 353 (face font-lock-type-face c-type c-decl-id-start fontified t) 353 354 (fontified t) 354 359 (face font-lock-variable-name-face fontified t) 359 362 (fontified t) 362 364 (face font-lock-type-face fontified t) 364 365 (face font-lock-type-face c-type c-decl-id-start fontified t) 365 366 (fontified t) 366 373 (face font-lock-variable-name-face fontified t) 373 382 (fontified t) 382 384 (face font-lock-type-face fontified t) 384 385 (face font-lock-type-face c-type c-decl-id-start fontified t) 385 388 (fontified t) 388 392 (face font-lock-variable-name-face fontified t) 392 402 (fontified t) 402 408 (face font-lock-keyword-face fontified t) 408 409 (fontified t) 409 412 (face font-lock-type-face fontified t) 412 459 (fontified t) 459 461 (face font-lock-type-face fontified t) 461 462 (face font-lock-type-face c-type c-decl-id-start fontified t) 462 463 (fontified t) 463 469 (face font-lock-variable-name-face fontified t) 469 472 (fontified t) 472 474 (face font-lock-type-face fontified t) 474 475 (face font-lock-type-face c-type c-decl-id-start fontified t) 475 476 (fontified t) 476 482 (face font-lock-variable-name-face fontified t) 482 485 (fontified t) 485 487 (face font-lock-type-face fontified t) 487 488 (face font-lock-type-face c-type c-decl-id-start fontified t) 488 489 (fontified t) 489 494 (face font-lock-variable-name-face fontified t) 494 501 (fontified t) 501 506 (face font-lock-keyword-face fontified t) 506 520 (fontified t) 520 522 (face font-lock-keyword-face fontified t) 522 535 (fontified t) 535 537 (face font-lock-type-face fontified t) 537 538 (face font-lock-type-face c-type c-decl-id-start fontified t) 538 539 (fontified t) 539 546 (face font-lock-variable-name-face fontified t) 546 572 (fontified t) 572 574 (face font-lock-type-face fontified t) 574 575 (face font-lock-type-face c-type c-decl-id-start fontified t) 575 576 (fontified t) 576 584 (face font-lock-variable-name-face fontified t) 584 645 (fontified t) 645 650 (face font-lock-keyword-face fontified t) 650 679 (fontified t) 679 685 (face font-lock-keyword-face fontified t) 685 702 (fontified t) 702 706 (face font-lock-keyword-face fontified t) 706 726 (fontified t) 726 727 (c-type c-decl-end fontified t) 727 790 (fontified t) 790 792 (face font-lock-type-face fontified t) 792 793 (face font-lock-type-face c-type c-decl-id-start fontified t) 793 794 (fontified t) 794 801 (face font-lock-variable-name-face fontified t) 801 828 (fontified t) 828 830 (face font-lock-type-face fontified t) 830 831 (face font-lock-type-face c-type c-decl-id-start fontified t) 831 832 (fontified t) 832 840 (face font-lock-variable-name-face fontified t) 840 915 (fontified t) 915 920 (face font-lock-keyword-face fontified t) 920 925 (fontified t) 925 929 (face font-lock-keyword-face fontified t) 929 945 (fontified t) 945 946 (c-type c-decl-end fontified t) 946 951 (fontified t) 951 953 (face font-lock-keyword-face fontified t) 953 1023 (fontified t) 1023 1028 (fontified t) 1028 1030 (face font-lock-type-face fontified t) 1030 1031 (face font-lock-type-face c-type c-decl-id-start fontified t) 1031 1032 (fontified t) 1032 1039 (face font-lock-variable-name-face fontified t) 1039 1067 (fontified t) 1067 1069 (face font-lock-type-face fontified t) 1069 1070 (face font-lock-type-face c-type c-decl-id-start fontified t) 1070 1071 (fontified t) 1071 1079 (face font-lock-variable-name-face fontified t) 1079 1146 (fontified t) 1146 1151 (face font-lock-keyword-face fontified t) 1151 1156 (fontified t) 1156 1160 (face font-lock-keyword-face fontified t) 1160 1178 (fontified t) 1178 1179 (c-type c-decl-end fontified t) 1179 1199 (fontified t) 1199 1204 (face font-lock-keyword-face fontified t) 1204 1209 (fontified t) 1209 1213 (face font-lock-keyword-face fontified t) 1213 1225 (fontified t) 1225 1226 (c-type c-decl-end fontified t) 1226 1231 (fontified t) 1231 1233 (face font-lock-keyword-face fontified t) 1233 1291 (fontified t) 1291 1296 (face font-lock-keyword-face fontified t) 1296 1411 (fontified t) 1411 1414 (fontified t) 1414 1654 (fontified t)) . 133) (undo-tree-id29 . -1641) (undo-tree-id30 . -1023) (undo-tree-id31 . -1641) (undo-tree-id32 . -1653) (undo-tree-id33 . -1641) (undo-tree-id34 . -1390) (undo-tree-id35 . -1414) (undo-tree-id36 . -1641) (undo-tree-id37 . -1641) (undo-tree-id38 . -1654) (undo-tree-id39 . -1654) 1774) nil (26502 62921 881603 37000) 0 nil])
([nil nil ((#("		printf(\"Error initializing SDL2.\");
" 0 9 (fontified t) 9 35 (face font-lock-string-face fontified t) 35 38 (fontified t)) . 92) (undo-tree-id26 . -37) (undo-tree-id27 . -38) (undo-tree-id28 . -38)) nil (26502 62921 881599 750000) 0 nil])
([nil nil ((#("	if(SDL_Init(SDL_INIT_VIDEO) < 0) {
	}
" 0 1 (fontified t) 1 3 (face font-lock-keyword-face fontified t) 3 36 (fontified t) 36 38 (fontified t) 38 39 (fontified t)) . 56) (undo-tree-id0 . -1) (undo-tree-id1 . -37) (undo-tree-id2 . -38) (undo-tree-id3 . -37) (undo-tree-id4 . -1) (undo-tree-id5 . -39) (undo-tree-id6 . -39) (undo-tree-id7 . -39) (undo-tree-id8 . -39) (undo-tree-id9 . -39) (undo-tree-id10 . -39) (undo-tree-id11 . -39) (undo-tree-id12 . -39) (undo-tree-id13 . -39) (undo-tree-id14 . -36) (undo-tree-id15 . -36) (undo-tree-id16 . -36) (undo-tree-id17 . -36) (undo-tree-id18 . -38) (undo-tree-id19 . -36) (undo-tree-id20 . -36) (undo-tree-id21 . -37) (undo-tree-id22 . -37) (undo-tree-id23 . -1) (undo-tree-id24 . -39) (undo-tree-id25 . -39) 57) nil (26502 62921 881596 674000) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -65) (undo-tree-id65 . -1) (63 . 66) (57 . 63) (55 . 57) (t 26502 62921 883900 37000)) nil (26502 62946 868897 498000) 0 nil])
([nil nil ((#("j" 0 1 (face font-lock-warning-face fontified nil)) . -67) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (66 . 68) (65 . 66)) nil (26502 62946 868896 614000) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -66) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (66 . 67) (#("'" 0 1 (face font-lock-warning-face fontified t)) . -66) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) 67) nil (26502 62946 868895 344000) 0 nil])
([nil nil ((#("j" 0 1 (face font-lock-string-face fontified nil)) . -66) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (64 . 67)) nil (26502 62946 868891 846000) 0 nil])
([nil nil ((#("j" 0 1 (face font-lock-string-face fontified nil)) . -73) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (65 . 74)) nil (26502 62946 868889 11000) 0 nil])
([nil nil ((#("j" 0 1 (face font-lock-string-face fontified nil)) . -76) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (73 . 77) (t 26502 62946 866923 144000)) nil (26502 62954 225939 482000) 0 nil])
([nil nil ((#("b" 0 1 (face font-lock-string-face fontified t)) . 75) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1)) nil (26502 62954 225936 579000) 0 nil])
([nil nil ((#("	printf(\"asdfasdf\\n\");
" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (face font-lock-string-face fontified t) 9 10 (face font-lock-string-face fontified t) 10 11 (face font-lock-string-face fontified t) 11 12 (face font-lock-string-face fontified t) 12 13 (face font-lock-string-face fontified t) 13 14 (face font-lock-string-face fontified t) 14 16 (face font-lock-string-face fontified t) 16 17 (face font-lock-string-face fontified t) 17 18 (face font-lock-string-face fontified t) 18 19 (face font-lock-string-face fontified t) 19 20 (face font-lock-string-face fontified t) 20 21 (fontified t) 21 22 (fontified t) 22 23 (fontified t)) . 56) (undo-tree-id72 . -23) (undo-tree-id73 . -22) (undo-tree-id74 . -23) (undo-tree-id75 . -23) (undo-tree-id76 . -23) (undo-tree-id77 . -23) (undo-tree-id78 . -23) (undo-tree-id79 . -23) (undo-tree-id80 . 4) (undo-tree-id81 . -19) (undo-tree-id82 . -19) (undo-tree-id83 . -19) (undo-tree-id84 . -19) (undo-tree-id85 . -19) (undo-tree-id86 . -19) (undo-tree-id87 . -19) (undo-tree-id88 . -19) (undo-tree-id89 . -19) (undo-tree-id90 . -19) (undo-tree-id91 . -19) (undo-tree-id92 . -19) (undo-tree-id93 . -19) (undo-tree-id94 . -19) (undo-tree-id95 . -18) (undo-tree-id96 . -18) (undo-tree-id97 . -18) (undo-tree-id98 . -19) (undo-tree-id99 . -19) (undo-tree-id100 . -7) (undo-tree-id101 . -7) (undo-tree-id102 . -7) (undo-tree-id103 . -7) (undo-tree-id104 . -23) 63 (t 26502 62954 227268 147000)) nil (26502 63031 154241 744000) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -66) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (66 . 67) 64 (t 26502 63031 155893 275000)) nil (26502 63063 878498 126000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -57) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) 58 (#("j" 0 1 (fontified nil)) . -58) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (57 . 59) (#("	" 0 1 (fontified nil)) . 56) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (55 . 58) (t 26502 63031 155893 275000)) nil (26502 63063 878496 652000) 0 nil])
([nil nil ((nil rear-nonsticky nil 133 . 134) (nil fontified nil 57 . 134) (57 . 134)) nil (26502 63063 878493 692000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 56) (undo-tree-id170 . -1) (undo-tree-id171 . 1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1)) nil (26502 63063 878493 120000) 0 nil])
([nil nil ((#("
	return 0;
" 0 1 (fontified t) 1 2 (fontified t) 2 8 (face font-lock-keyword-face fontified t) 8 11 (fontified t) 11 12 (fontified t)) . 133) (undo-tree-id126 . -1) (undo-tree-id127 . -11) (undo-tree-id128 . -12) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . 12) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -11) (undo-tree-id157 . -8) (undo-tree-id158 . -8) (undo-tree-id159 . -8) (undo-tree-id160 . -11) (undo-tree-id161 . -11) (undo-tree-id162 . -11) (undo-tree-id163 . -10) (undo-tree-id164 . -10) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -12) (undo-tree-id169 . -12)) nil (26502 63063 878489 990000) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -100) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (94 . 101) (#("printf" 0 6 (fontified t)) . 94) (undo-tree-id123 . -5) (undo-tree-id124 . -6) (undo-tree-id125 . -6)) nil (26502 63063 878448 329000) 0 nil])
([nil nil ((#("j" 0 1 (face font-lock-string-face fontified nil)) . -126) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (114 . 127) (#("i" 0 1 (face font-lock-string-face fontified t)) . -114) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) 115 (114 . 115) (#("a" 0 1 (face font-lock-string-face fontified t)) . -114) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -115) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) 116 (102 . 116) (#("Error initializing SDL2." 0 24 (face font-lock-string-face fontified t)) . 102) (undo-tree-id118 . -23) (undo-tree-id119 . -24) (undo-tree-id120 . -24)) nil (26502 63063 878444 34000) 0 nil])
([nil nil ((#("j" 0 1 (c-is-sws t fontified nil)) . -44) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (42 . 45) (t 26502 63063 878731 827000)) nil (26502 63119 400953 410000) 0 nil])
([nil nil ((nil rear-nonsticky nil 102 . 103) (nil fontified nil 102 . 103) (nil fontified nil 82 . 102) (nil fontified nil 81 . 82) (nil fontified nil 64 . 81) (nil fontified nil 63 . 64) (nil fontified nil 45 . 63) (nil fontified nil 44 . 45) (44 . 103)) nil (26502 63119 400952 250000) 0 nil])
([nil nil ((#("
" 0 1 (c-is-sws t fontified t)) . 103) (undo-tree-id191 . 1) (undo-tree-id192 . -1)) nil (26502 63119 400950 869000) 0 nil])
([nil nil ((#("
" 0 1 (c-is-sws t fontified t)) . 103) (undo-tree-id189 . 1) (undo-tree-id190 . -1)) nil (26502 63119 400947 887000) 0 nil])
([nil nil ((#("#define GRID_SIZE 10
" 0 1 (face font-lock-preprocessor-face fontified t c-in-sws t c-is-sws t) 1 7 (face font-lock-preprocessor-face fontified t c-in-sws t) 7 8 (fontified t c-in-sws t) 8 17 (face font-lock-variable-name-face fontified t c-in-sws t) 17 21 (fontified t c-in-sws t)) . 81) (undo-tree-id195 . -20) (undo-tree-id196 . -20) (undo-tree-id197 . -21) (t 26502 63119 399811 864000)) nil (26502 63134 327456 98000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -173) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) 174 (#("j" 0 1 (fontified nil)) . -174) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (173 . 175) (#("	" 0 1 (fontified nil)) . 172) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (172 . 174) (#("	" 0 1 (fontified nil)) . 171) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (170 . 173) (t 26502 63121 63976 863000)) nil (26502 63137 820314 721000) 0 nil] [nil nil ((nil rear-nonsticky nil 340 . 341) (nil fontified nil 169 . 341) (169 . 341) 168 (t 26502 63121 63976 863000)) ((#("	SDL_Window* window = SDL_CreateWindow(\"VPaper\", 200, 200, WIN_W, WIN_H, SDL_WINDOW_RESIZABLE);
	SDL_Renderer* rend = SDL_CreateRenderer(window, 0, SDL_RENDERER_SOFTWARE);
" 0 1 (fontified nil) 1 10 (face font-lock-type-face fontified nil) 10 11 (face font-lock-type-face c-type c-decl-id-start fontified nil) 11 13 (fontified nil) 13 19 (face font-lock-variable-name-face fontified nil) 19 39 (fontified nil) 39 47 (face font-lock-string-face fontified nil) 47 97 (fontified nil) 97 108 (face font-lock-type-face fontified nil) 108 109 (face font-lock-type-face c-type c-decl-id-start fontified nil) 109 111 (fontified nil) 111 115 (face font-lock-variable-name-face fontified nil) 115 171 (fontified nil) 171 172 (rear-nonsticky nil fontified nil)) . 169) (undo-tree-id214 . -171) (undo-tree-id215 . -172) (undo-tree-id216 . -172) (undo-tree-id217 . -172) (undo-tree-id218 . -172) (undo-tree-id219 . -172) (undo-tree-id220 . -172) (undo-tree-id221 . -172) (nil fontified t 284 . 340) (nil fontified t 280 . 284) (nil fontified t 278 . 280) (nil fontified t 277 . 278) (nil fontified t 266 . 277) (nil fontified t 216 . 266) (nil fontified t 208 . 216) (nil fontified t 188 . 208) (nil fontified t 182 . 188) (nil fontified t 180 . 182) (nil fontified t 179 . 180) (nil fontified t 170 . 179) (nil fontified t 169 . 170) (nil rear-nonsticky t 340 . 341)) (26502 63134 69391 133000) 0 nil] [nil nil ((nil rear-nonsticky nil 302 . 303) (nil fontified nil 131 . 303) (131 . 303) 130 (t 26502 63121 63976 863000)) ((#("	SDL_Window* window = SDL_CreateWindow(\"VPaper\", 200, 200, WIN_W, WIN_H, SDL_WINDOW_RESIZABLE);
	SDL_Renderer* rend = SDL_CreateRenderer(window, 0, SDL_RENDERER_SOFTWARE);
" 0 1 (fontified nil) 1 10 (face font-lock-type-face fontified nil) 10 11 (face font-lock-type-face c-type c-decl-id-start fontified nil) 11 13 (fontified nil) 13 19 (face font-lock-variable-name-face fontified nil) 19 39 (fontified nil) 39 47 (face font-lock-string-face fontified nil) 47 97 (fontified nil) 97 108 (face font-lock-type-face fontified nil) 108 109 (face font-lock-type-face c-type c-decl-id-start fontified nil) 109 111 (fontified nil) 111 115 (face font-lock-variable-name-face fontified nil) 115 171 (fontified nil) 171 172 (rear-nonsticky nil fontified nil)) . 131) (undo-tree-id198 . -171) (undo-tree-id199 . -172) (undo-tree-id200 . -172) (undo-tree-id201 . -172) (nil rear-nonsticky t 302 . 303)) (26502 63132 723623 349000) 0 nil])
([nil nil ((nil rear-nonsticky nil 344 . 345) (nil fontified nil 173 . 345) (173 . 345)) nil (26502 63137 820310 771000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -341) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) 342 (#("j" 0 1 (fontified nil)) . -342) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (341 . 343) (341 . 342)) ((#("
" 0 1 (fontified nil)) . 341) (undo-tree-id209 . 1) (#("	j" 0 1 (fontified nil) 1 2 (fontified nil)) . 341) (undo-tree-id210 . -2) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -2) (341 . 343)) (26502 63134 68717 110000) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified t)) . 172) (undo-tree-id222 . -1) (undo-tree-id223 . 1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1)) nil (26502 63137 820308 349000) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . 344) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . 1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (t 26502 63137 822351 866000)) nil (26502 63141 19208 483000) 0 nil])
([nil nil ((#("j" 0 1 (face font-lock-variable-name-face fontified nil)) . -291) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (287 . 292) (#("o" 0 1 (face font-lock-variable-name-face fontified t)) . -287) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -288) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -289) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) 290 (287 . 290) (t 26502 63141 20932 26000)) nil (26502 63146 3054 630000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -349) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) 350 (#("j" 0 1 (fontified nil)) . -350) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (349 . 351) (#("	" 0 1 (fontified nil)) . 348) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (347 . 350) (t 26502 63146 5105 360000)) nil (26502 63170 657630 935000) 0 nil])
([nil nil ((nil rear-nonsticky nil 449 . 450) (nil fontified nil 349 . 450) (349 . 450)) nil (26502 63170 657627 250000) 0 nil])
([nil nil ((#("		" 0 2 (fontified nil)) . -425) (424 . 425) (#("		" 0 2 (fontified nil)) . -350) (349 . 350) 450) nil (26502 63170 658520 1000) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -392) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (388 . 393) (387 . 388) (383 . 387) (382 . 383) (380 . 382) (#("2" 0 1 (fontified t)) . -380) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) 381 (379 . 381) (#("darkGreen.r, darkGreen.g, darkGreen.b" 0 37 (fontified t)) . 379) (undo-tree-id285 . -36) (undo-tree-id286 . -36) (undo-tree-id287 . -36) (undo-tree-id288 . -36) (undo-tree-id289 . -36) (undo-tree-id290 . -37) (undo-tree-id291 . -37) 415 (t 26502 63171 425722 24000)) nil (26502 63180 650449 56000) 0 nil] [nil nil ((423 . 424) (#("	" 0 1 (fontified nil)) . 423) (#("
" 0 1 (fontified t)) . -423) (undo-tree-id270 . -1) 349) ((423 . 424) (423 . 424) (#(" " 0 1 (fontified t)) . 423)) (26502 63170 657624 37000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-variable-name-face fontified t)) . 287) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (t 26502 63180 651107 29000)) nil (26502 63188 438075 805000) 0 nil])
nil
([nil nil ((#("r" 0 1 (face font-lock-variable-name-face fontified t)) . 287) (undo-tree-id296 . -1) (undo-tree-id297 . -1)) nil (26502 63188 438074 701000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-variable-name-face fontified t)) . 287) (undo-tree-id294 . -1) (undo-tree-id295 . -1)) nil (26502 63188 438073 409000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-variable-name-face fontified t)) . 287) (undo-tree-id292 . -1) (undo-tree-id293 . -1)) nil (26502 63210 23782 437000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -421) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) 422 (#("j" 0 1 (fontified nil)) . -422) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (421 . 423) (#("	" 0 1 (fontified nil)) . 420) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (419 . 422) (t 26502 63188 437648 227000)) nil (26502 63217 427038 915000) 0 nil] [nil nil ((nil rear-nonsticky nil 416 . 417) (nil fontified nil 365 . 417) (365 . 417) 364 (t 26502 63188 437648 227000)) ((#("	SDL_DestroyWindow(window);
	SDL_Quit();
	return 0;
" 0 1 (fontified nil) 1 18 (face font-lock-function-name-face fontified nil) 18 19 (c-type c-decl-arg-start fontified nil) 19 42 (fontified nil) 42 48 (face font-lock-keyword-face fontified nil) 48 51 (fontified nil) 51 52 (rear-nonsticky nil fontified nil)) . 365) (undo-tree-id300 . -51) (undo-tree-id301 . -52) (undo-tree-id302 . -52) (undo-tree-id303 . -52) (nil rear-nonsticky t 416 . 417)) (26502 63210 23416 887000) 0 nil])
([nil nil ((nil rear-nonsticky nil 472 . 473) (nil fontified nil 421 . 473) (421 . 473)) nil (26502 63217 427035 863000) 0 nil])
nil
([nil nil ((#("j" 0 1 (fontified nil)) . -179) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (178 . 180) (177 . 178) (#("-" 0 1 (fontified t)) . -177) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (#("1" 0 1 (fontified t)) . -178) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) 179 (170 . 179) (167 . 170)) nil (26502 63217 427033 769000) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -178) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (178 . 179) (#("0" 0 1 (fontified t)) . -178) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) 179 (177 . 179) (t 26502 63217 428803 234000)) nil (26502 63219 123249 900000) 0 nil])
([nil nil ((#("

" 0 1 (fontified t rear-nonsticky t) 1 2 (fontified t rear-nonsticky t)) . 486) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -2) (undo-tree-id331 . -1) (undo-tree-id332 . -2) (undo-tree-id333 . -2) (undo-tree-id334 . -2) (undo-tree-id335 . -2) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -2) (undo-tree-id340 . -2) (t 26502 63219 122983 236000)) nil (26502 63222 87578 139000) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -442) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (440 . 443) (439 . 440) (#("P" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -439) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (#("(" 0 1 (fontified t)) . -440) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) 441 (440 . 441) (439 . 440) (#("r" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -439) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (#("p" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -440) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (#("(" 0 1 (fontified t)) . -441) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) 442 (441 . 442) (435 . 441) (#("l" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -435) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (#("s" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -436) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) 437 (435 . 437) (434 . 435) (#("	" 0 1 (fontified nil)) . 433) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (432 . 435) (t 26502 63222 87798 236000)) nil (26502 63237 641029 213000) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -443) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (442 . 444)) nil (26502 63237 641008 310000) 0 nil])
([nil current ((#("j" 0 1 (fontified nil)) . -442) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (441 . 443) (#("1" 0 1 (fontified t)) . -441) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) 442 (441 . 442)) nil (26502 63237 641005 339000) 0 nil])
nil
